class IntlCalendar
{

    const FIELD_ERA = 0;

    const FIELD_YEAR = 1;

    const FIELD_MONTH = 2;

    const FIELD_WEEK_OF_YEAR = 3;

    const FIELD_WEEK_OF_MONTH = 4;

    const FIELD_DATE = 5;

    const FIELD_DAY_OF_YEAR = 6;

    const FIELD_DAY_OF_WEEK = 7;

    const FIELD_DAY_OF_WEEK_IN_MONTH = 8;

    const FIELD_AM_PM = 9;

    const FIELD_HOUR = 10;

    const FIELD_HOUR_OF_DAY = 11;

    const FIELD_MINUTE = 12;

    const FIELD_SECOND = 13;

    const FIELD_MILLISECOND = 14;

    const FIELD_ZONE_OFFSET = 15;

    const FIELD_DST_OFFSET = 16;

    const FIELD_YEAR_WOY = 17;

    const FIELD_DOW_LOCAL = 18;

    const FIELD_EXTENDED_YEAR = 19;

    const FIELD_JULIAN_DAY = 20;

    const FIELD_MILLISECONDS_IN_DAY = 21;

    const FIELD_IS_LEAP_MONTH = 22;

    const FIELD_FIELD_COUNT = 23;

    const FIELD_DAY_OF_MONTH = 5;

    const DOW_SUNDAY = 1;

    const DOW_MONDAY = 2;

    const DOW_TUESDAY = 3;

    const DOW_WEDNESDAY = 4;

    const DOW_THURSDAY = 5;

    const DOW_FRIDAY = 6;

    const DOW_SATURDAY = 7;

    const DOW_TYPE_WEEKDAY = 0;

    const DOW_TYPE_WEEKEND = 1;

    const DOW_TYPE_WEEKEND_OFFSET = 2;

    const DOW_TYPE_WEEKEND_CEASE = 3;

    const WALLTIME_FIRST = 1;

    const WALLTIME_LAST = 0;

    const WALLTIME_NEXT_VALID = 2;

    private function __construct()
    {
    }

    public static function createInstance($timeZone = NULL, $locale = '')
    {
    }

    public static function getKeywordValuesForLocale($key, $locale, $commonlyUsed)
    {
    }

    public static function getNow()
    {
    }

    public static function getAvailableLocales()
    {
    }

    public function get($field)
    {
    }

    public function getTime()
    {
    }

    public function setTime($date)
    {
    }

    public function add($field, $amount)
    {
    }

    public function setTimeZone($timeZone)
    {
    }

    public function after(\IntlCalendar $calendar)
    {
    }

    public function before(\IntlCalendar $calendar)
    {
    }

    public function set($fieldOrYear, $valueOrMonth, $dayOfMonth = NULL, $hour = NULL, $minute = NULL, $second = NULL)
    {
    }

    public function roll($field, $amountOrUpOrDown)
    {
    }

    public function clear($field = NULL)
    {
    }

    public function fieldDifference($when, $field)
    {
    }

    public function getActualMaximum($field)
    {
    }

    public function getActualMinimum($field)
    {
    }

    public function getDayOfWeekType($dayOfWeek)
    {
    }

    public function getFirstDayOfWeek()
    {
    }

    public function getGreatestMinimum($field)
    {
    }

    public function getLeastMaximum($field)
    {
    }

    public function getLocale($localeType)
    {
    }

    public function getMaximum($field)
    {
    }

    public function getMinimalDaysInFirstWeek()
    {
    }

    public function getMinimum($field)
    {
    }

    public function getTimeZone()
    {
    }

    public function getType()
    {
    }

    public function getWeekendTransition($dayOfWeek)
    {
    }

    public function inDaylightTime()
    {
    }

    public function isEquivalentTo(\IntlCalendar $calendar)
    {
    }

    public function isLenient()
    {
    }

    public function isSet($field)
    {
    }

    public function isWeekend($date = NULL)
    {
    }

    public function setFirstDayOfWeek($dayOfWeek)
    {
    }

    public function setLenient($isLenient)
    {
    }

    public function setMinimalDaysInFirstWeek($numberOfDays)
    {
    }

    public function equals(\IntlCalendar $calendar)
    {
    }

    public function getRepeatedWallTimeOption()
    {
    }

    public function getSkippedWallTimeOption()
    {
    }

    public function setRepeatedWallTimeOption($wallTimeOption)
    {
    }

    public function setSkippedWallTimeOption($wallTimeOption)
    {
    }

    public static function fromDateTime($dateTime)
    {
    }

    public function toDateTime()
    {
    }

    public function getErrorCode()
    {
    }

    public function getErrorMessage()
    {
    }


}
